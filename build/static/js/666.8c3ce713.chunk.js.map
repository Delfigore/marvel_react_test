{"version":3,"file":"static/js/666.8c3ce713.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      style={{\r\n        display: \"block\",\r\n        width: \"250px\",\r\n        height: \"250px\",\r\n        objectFit: \"contain\",\r\n        margin: \"0 auto\",\r\n      }}\r\n      src={img}\r\n      alt=\"Error\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useState, useEffect } from \"react\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState(null);\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    const timerId = setInterval(updateChar, 60000);\n\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n    getCharacter(id).then(onCharLoaded);\n  };\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"randomchar\">\n      {errorMessage}\n      {spinner}\n      {content}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button onClick={updateChar} className=\"button button__main\">\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki } = char;\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img\n        src={thumbnail}\n        alt=\"Random character\"\n        className=\"randomchar__img\"\n        style={imgStyle}\n      />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport \"./charList.scss\";\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setnewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const { loading, error, getAllCharacters } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setnewItemLoading(false) : setnewItemLoading(true);\n    getAllCharacters(offset).then(onCharListLoaded);\n  };\n\n  const onCharListLoaded = async (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n    setCharList([...charList, ...newCharList]);\n    setnewItemLoading(false);\n    setOffset(offset + 9);\n    setCharEnded(ended);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    itemRefs.current.forEach((item) =>\n      item.classList.remove(\"char__item_selected\")\n    );\n    itemRefs.current[id].classList.add(\"char__item_selected\");\n    itemRefs.current[id].focus();\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = { objectFit: \"cover\" };\n      if (\n        item.thumbnail ===\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n      ) {\n        imgStyle = { objectFit: \"unset\" };\n      }\n\n      return (\n        <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n          <li\n            className=\"char__item\"\n            tabIndex={0}\n            ref={(el) => (itemRefs.current[i] = el)}\n            onClick={() => {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }}\n            onKeyPress={(e) => {\n              if (e.key === \" \" || e.key === \"Enter\") {\n                props.onCharSelected(item.id);\n                focusOnItem(i);\n              }\n            }}\n          >\n            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n            <div className=\"char__name\">{item.name}</div>\n          </li>\n        </CSSTransition>\n      );\n    });\n\n    return (\n      <ul className=\"char__grid\">\n        <TransitionGroup component={null}>{items}</TransitionGroup>\n      </ul>\n    );\n  }\n\n  const items = renderItems(charList);\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n  return (\n    <div className=\"char__list\">\n      {errorMessage}\n      {spinner}\n      {items}\n      <button\n        disabled={newItemLoading}\n        style={{ display: charEnded ? \"none\" : \"block\" }}\n        className=\"button button__main button__long\"\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Skeleton from \"../skeleton/Skeleton\";\n\nimport \"./charInfo.scss\";\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n  }, [props.charId]);\n\n  const updateChar = () => {\n    const { charId } = props;\n    if (!charId) {\n      return;\n    }\n\n    clearError();\n    getCharacter(charId).then(onCharLoaded);\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const skeleton = char || loading || error ? null : <Skeleton />;\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"char__info\">\n      {skeleton}\n      {errorMessage}\n      {spinner}\n      {content}\n    </div>\n  );\n};\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = char;\n\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : \"There is no comics with this character\"}\n        {comics.map((item, i) => {\n          // eslint-disable-next-line\n          if (i > 9) return;\n          return (\n            <li key={i} className=\"char__comics-item\">\n              {item.name}\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { useState } from \"react\";\r\nimport {\r\n  Formik,\r\n  Form,\r\n  Field,\r\n  ErrorMessage as FormikErrorMessage,\r\n} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport \"./charSearchForm.scss\";\r\n\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { loading, error, getCharacterByName, clearError } = useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n\r\n    getCharacterByName(name).then(onCharLoaded);\r\n  };\r\n\r\n  const errorMessage = error ? (\r\n    <div className=\"char__search-critical-error\">\r\n      <ErrorMessage />\r\n    </div>\r\n  ) : null;\r\n  const results = !char ? null : char.length > 0 ? (\r\n    <div className=\"char__search-wrapper\">\r\n      <div className=\"char__search-success\">\r\n        There is! Visit {char[0].name} page?\r\n      </div>\r\n      <Link\r\n        to={`/characters/${char[0].id}`}\r\n        className=\"button button__secondary\"\r\n      >\r\n        <div className=\"inner\">To page</div>\r\n      </Link>\r\n    </div>\r\n  ) : (\r\n    <div className=\"char__search-error\">\r\n      The character was not found. Check the name and try again\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik\r\n        initialValues={{\r\n          charName: \"\",\r\n        }}\r\n        validationSchema={Yup.object({\r\n          charName: Yup.string().required(\"This field is required\"),\r\n        })}\r\n        onSubmit={({ charName }) => {\r\n          updateChar(charName);\r\n        }}\r\n      >\r\n        <Form>\r\n          <label className=\"char__search-label\" htmlFor=\"charName\">\r\n            Or find a character by name:\r\n          </label>\r\n          <div className=\"char__search-wrapper\">\r\n            <Field\r\n              id=\"charName\"\r\n              name=\"charName\"\r\n              type=\"text\"\r\n              placeholder=\"Enter name\"\r\n            />\r\n            <button\r\n              type=\"submit\"\r\n              className=\"button button__main\"\r\n              disabled={loading}\r\n            >\r\n              <div className=\"inner\">find</div>\r\n            </button>\r\n          </div>\r\n          <FormikErrorMessage\r\n            component=\"div\"\r\n            className=\"char__search-error\"\r\n            name=\"charName\"\r\n          />\r\n        </Form>\r\n      </Formik>\r\n      {results}\r\n      {errorMessage}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharSearchForm;\r\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from \"../../resources/img/vision.png\";\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Marvel information portal\" />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  // ЗДЕСЬ БУДЕТ ВАШ КЛЮЧ, ЭТОТ КЛЮЧ МОЖЕТ НЕ РАБОТАТЬ\r\n  const _apiKey = \"apikey=c5d6fc8b83116d92ed468ce36bac6c62\";\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  // Вариант модификации готового метода для поиска по имени.\r\n  // Вызывать его можно вот так: getAllCharacters(null, name)\r\n\r\n  // const getAllCharacters = async (offset = _baseOffset, name = '') => {\r\n  //     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\r\n  //     return res.data.results.map(_transformCharacter);\r\n  // }\r\n\r\n  // Или можно создать отдельный метод для поиска по имени\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(\r\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} p.`\r\n        : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects[0]?.language || \"en-us\",\r\n      price: comics.prices[0].price\r\n        ? `${comics.prices[0].price}$`\r\n        : \"not available\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    clearError,\r\n    getAllCharacters,\r\n    getCharacterByName,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n\r\n\r\n        }\r\n        \r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {request, loading, error, clearError}\r\n}"],"names":["_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","_useState","useState","_useState2","_slicedToArray","setChar","_useMarvelService","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","_useState3","_useState4","newItemLoading","setnewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newCharList","ended","wrap","_context","prev","next","length","concat","_toConsumableArray","stop","_x","apply","arguments","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","_Fragment","comics","charId","skeleton","Skeleton","getCharacterByName","results","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","_createClass","value","errorInfo","console","log","this","setState","Component","selectedChar","Helmet","RandomChar","CharList","CharInfo","CharSearchForm","decoration","_useHttp","setLoading","setError","request","useCallback","url","method","body","headers","response","data","_args","undefined","fetch","sent","ok","Error","status","json","abrupt","t0","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","_ref2","_callee2","_context2","_ref3","_callee3","_context3","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","slice","path","extension","urls","_comics$textObjects$","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}